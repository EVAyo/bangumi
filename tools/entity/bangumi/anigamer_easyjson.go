// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bangumi

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson26239f76DecodeScraperEntityBangumi(in *jlexer.Lexer, out *AnigamerData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "acg_sn":
			out.AcgSn = int(in.Int())
		case "anime_sn":
			out.AnimeSn = int(in.Int())
		case "title":
			out.Title = string(in.String())
		case "dc_c1":
			out.DcC1 = int(in.Int())
		case "dc_c2":
			out.DcC2 = int(in.Int())
		case "is_bilingual":
			out.IsBilingual = bool(in.Bool())
		case "edition":
			out.Edition = string(in.String())
		case "is_vip":
			out.IsVip = bool(in.Bool())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson26239f76EncodeScraperEntityBangumi(out *jwriter.Writer, in AnigamerData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"acg_sn\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AcgSn))
	}
	{
		const prefix string = ",\"anime_sn\":"
		out.RawString(prefix)
		out.Int(int(in.AnimeSn))
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"dc_c1\":"
		out.RawString(prefix)
		out.Int(int(in.DcC1))
	}
	{
		const prefix string = ",\"dc_c2\":"
		out.RawString(prefix)
		out.Int(int(in.DcC2))
	}
	{
		const prefix string = ",\"is_bilingual\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsBilingual))
	}
	{
		const prefix string = ",\"edition\":"
		out.RawString(prefix)
		out.String(string(in.Edition))
	}
	{
		const prefix string = ",\"is_vip\":"
		out.RawString(prefix)
		out.Bool(bool(in.IsVip))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v AnigamerData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson26239f76EncodeScraperEntityBangumi(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v AnigamerData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson26239f76EncodeScraperEntityBangumi(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *AnigamerData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson26239f76DecodeScraperEntityBangumi(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *AnigamerData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson26239f76DecodeScraperEntityBangumi(l, v)
}
func easyjson26239f76DecodeScraperEntityBangumi1(in *jlexer.Lexer, out *Anigamer) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "data":
			if in.IsNull() {
				in.Skip()
				out.Data = nil
			} else {
				in.Delim('[')
				if out.Data == nil {
					if !in.IsDelim(']') {
						out.Data = make([]AnigamerData, 0, 0)
					} else {
						out.Data = []AnigamerData{}
					}
				} else {
					out.Data = (out.Data)[:0]
				}
				for !in.IsDelim(']') {
					var v1 AnigamerData
					(v1).UnmarshalEasyJSON(in)
					out.Data = append(out.Data, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson26239f76EncodeScraperEntityBangumi1(out *jwriter.Writer, in Anigamer) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"data\":"
		out.RawString(prefix[1:])
		if in.Data == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v2, v3 := range in.Data {
				if v2 > 0 {
					out.RawByte(',')
				}
				(v3).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Anigamer) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson26239f76EncodeScraperEntityBangumi1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Anigamer) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson26239f76EncodeScraperEntityBangumi1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Anigamer) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson26239f76DecodeScraperEntityBangumi1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Anigamer) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson26239f76DecodeScraperEntityBangumi1(l, v)
}
