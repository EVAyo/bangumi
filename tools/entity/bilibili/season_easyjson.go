// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package bilibili

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjsonA209d07bDecodeBangumiEntityBilibili(in *jlexer.Lexer, out *UpInfo) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "avatar":
			out.Avatar = string(in.String())
		case "follower":
			out.Follower = int(in.Int())
		case "is_vip":
			out.IsVip = int(in.Int())
		case "mid":
			out.Mid = int(in.Int())
		case "pendant":
			(out.Pendant).UnmarshalEasyJSON(in)
		case "uname":
			out.Uname = string(in.String())
		case "verify_type":
			out.VerifyType = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili(out *jwriter.Writer, in UpInfo) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"avatar\":"
		out.RawString(prefix[1:])
		out.String(string(in.Avatar))
	}
	{
		const prefix string = ",\"follower\":"
		out.RawString(prefix)
		out.Int(int(in.Follower))
	}
	{
		const prefix string = ",\"is_vip\":"
		out.RawString(prefix)
		out.Int(int(in.IsVip))
	}
	{
		const prefix string = ",\"mid\":"
		out.RawString(prefix)
		out.Int(int(in.Mid))
	}
	{
		const prefix string = ",\"pendant\":"
		out.RawString(prefix)
		(in.Pendant).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"uname\":"
		out.RawString(prefix)
		out.String(string(in.Uname))
	}
	{
		const prefix string = ",\"verify_type\":"
		out.RawString(prefix)
		out.Int(int(in.VerifyType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v UpInfo) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v UpInfo) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *UpInfo) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *UpInfo) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili1(in *jlexer.Lexer, out *Stat) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "coins":
			out.Coins = int(in.Int())
		case "danmakus":
			out.Danmakus = int(in.Int())
		case "favorites":
			out.Favorites = int(in.Int())
		case "reply":
			out.Reply = int(in.Int())
		case "share":
			out.Share = int(in.Int())
		case "views":
			out.Views = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili1(out *jwriter.Writer, in Stat) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"coins\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Coins))
	}
	{
		const prefix string = ",\"danmakus\":"
		out.RawString(prefix)
		out.Int(int(in.Danmakus))
	}
	{
		const prefix string = ",\"favorites\":"
		out.RawString(prefix)
		out.Int(int(in.Favorites))
	}
	{
		const prefix string = ",\"reply\":"
		out.RawString(prefix)
		out.Int(int(in.Reply))
	}
	{
		const prefix string = ",\"share\":"
		out.RawString(prefix)
		out.Int(int(in.Share))
	}
	{
		const prefix string = ",\"views\":"
		out.RawString(prefix)
		out.Int(int(in.Views))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Stat) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Stat) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Stat) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Stat) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili1(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili2(in *jlexer.Lexer, out *Seasons) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "badge":
			out.Badge = string(in.String())
		case "badge_type":
			out.BadgeType = int(in.Int())
		case "cover":
			out.Cover = string(in.String())
		case "media_id":
			out.MediaID = int(in.Int())
		case "new_ep":
			(out.NewEp).UnmarshalEasyJSON(in)
		case "season_id":
			out.SeasonID = int(in.Int())
		case "season_title":
			out.SeasonTitle = string(in.String())
		case "season_type":
			out.SeasonType = int(in.Int())
		case "stat":
			(out.Stat).UnmarshalEasyJSON(in)
		case "title":
			out.Title = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili2(out *jwriter.Writer, in Seasons) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"badge\":"
		out.RawString(prefix[1:])
		out.String(string(in.Badge))
	}
	{
		const prefix string = ",\"badge_type\":"
		out.RawString(prefix)
		out.Int(int(in.BadgeType))
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"media_id\":"
		out.RawString(prefix)
		out.Int(int(in.MediaID))
	}
	{
		const prefix string = ",\"new_ep\":"
		out.RawString(prefix)
		(in.NewEp).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"season_id\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"season_title\":"
		out.RawString(prefix)
		out.String(string(in.SeasonTitle))
	}
	{
		const prefix string = ",\"season_type\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonType))
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		(in.Stat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Seasons) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Seasons) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Seasons) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Seasons) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili2(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili3(in *jlexer.Lexer, out *SeasonResult) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "code":
			out.Code = int(in.Int())
		case "message":
			out.Message = string(in.String())
		case "result":
			(out.Result).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili3(out *jwriter.Writer, in SeasonResult) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"code\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Code))
	}
	{
		const prefix string = ",\"message\":"
		out.RawString(prefix)
		out.String(string(in.Message))
	}
	{
		const prefix string = ",\"result\":"
		out.RawString(prefix)
		(in.Result).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v SeasonResult) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v SeasonResult) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *SeasonResult) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *SeasonResult) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili3(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili4(in *jlexer.Lexer, out *Rights) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allow_bp":
			out.AllowBp = int(in.Int())
		case "allow_bp_rank":
			out.AllowBpRank = int(in.Int())
		case "allow_download":
			out.AllowDownload = int(in.Int())
		case "allow_review":
			out.AllowReview = int(in.Int())
		case "can_watch":
			out.CanWatch = int(in.Int())
		case "copyright":
			out.Copyright = string(in.String())
		case "is_preview":
			out.IsPreview = int(in.Int())
		case "watch_platform":
			out.WatchPlatform = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili4(out *jwriter.Writer, in Rights) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allow_bp\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AllowBp))
	}
	{
		const prefix string = ",\"allow_bp_rank\":"
		out.RawString(prefix)
		out.Int(int(in.AllowBpRank))
	}
	{
		const prefix string = ",\"allow_download\":"
		out.RawString(prefix)
		out.Int(int(in.AllowDownload))
	}
	{
		const prefix string = ",\"allow_review\":"
		out.RawString(prefix)
		out.Int(int(in.AllowReview))
	}
	{
		const prefix string = ",\"can_watch\":"
		out.RawString(prefix)
		out.Int(int(in.CanWatch))
	}
	{
		const prefix string = ",\"copyright\":"
		out.RawString(prefix)
		out.String(string(in.Copyright))
	}
	{
		const prefix string = ",\"is_preview\":"
		out.RawString(prefix)
		out.Int(int(in.IsPreview))
	}
	{
		const prefix string = ",\"watch_platform\":"
		out.RawString(prefix)
		out.Int(int(in.WatchPlatform))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rights) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rights) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rights) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rights) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili4(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili5(in *jlexer.Lexer, out *Result) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "actors":
			out.Actors = string(in.String())
		case "alias":
			out.Alias = string(in.String())
		case "areas":
			if in.IsNull() {
				in.Skip()
				out.Areas = nil
			} else {
				in.Delim('[')
				if out.Areas == nil {
					if !in.IsDelim(']') {
						out.Areas = make([]Areas, 0, 2)
					} else {
						out.Areas = []Areas{}
					}
				} else {
					out.Areas = (out.Areas)[:0]
				}
				for !in.IsDelim(']') {
					var v1 Areas
					(v1).UnmarshalEasyJSON(in)
					out.Areas = append(out.Areas, v1)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "cover":
			out.Cover = string(in.String())
		case "episodes":
			if in.IsNull() {
				in.Skip()
				out.Episodes = nil
			} else {
				in.Delim('[')
				if out.Episodes == nil {
					if !in.IsDelim(']') {
						out.Episodes = make([]Episodes, 0, 0)
					} else {
						out.Episodes = []Episodes{}
					}
				} else {
					out.Episodes = (out.Episodes)[:0]
				}
				for !in.IsDelim(']') {
					var v2 Episodes
					(v2).UnmarshalEasyJSON(in)
					out.Episodes = append(out.Episodes, v2)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "evaluate":
			out.Evaluate = string(in.String())
		case "is_paster_ads":
			out.IsPasterAds = int(in.Int())
		case "jp_title":
			out.JpTitle = string(in.String())
		case "link":
			out.Link = string(in.String())
		case "media_id":
			out.MediaID = int(in.Int())
		case "mode":
			out.Mode = int(in.Int())
		case "newest_ep":
			(out.NewestEp).UnmarshalEasyJSON(in)
		case "paster_text":
			out.PasterText = string(in.String())
		case "payment":
			if in.IsNull() {
				in.Skip()
				out.Payment = nil
			} else {
				if out.Payment == nil {
					out.Payment = new(Payment)
				}
				(*out.Payment).UnmarshalEasyJSON(in)
			}
		case "publish":
			(out.Publish).UnmarshalEasyJSON(in)
		case "rating":
			(out.Rating).UnmarshalEasyJSON(in)
		case "rights":
			(out.Rights).UnmarshalEasyJSON(in)
		case "season_id":
			out.SeasonID = int(in.Int())
		case "season_status":
			out.SeasonStatus = int(in.Int())
		case "season_title":
			out.SeasonTitle = string(in.String())
		case "season_type":
			out.SeasonType = int(in.Int())
		case "seasons":
			if in.IsNull() {
				in.Skip()
				out.Seasons = nil
			} else {
				in.Delim('[')
				if out.Seasons == nil {
					if !in.IsDelim(']') {
						out.Seasons = make([]Seasons, 0, 0)
					} else {
						out.Seasons = []Seasons{}
					}
				} else {
					out.Seasons = (out.Seasons)[:0]
				}
				for !in.IsDelim(']') {
					var v3 Seasons
					(v3).UnmarshalEasyJSON(in)
					out.Seasons = append(out.Seasons, v3)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "series_title":
			out.SeriesTitle = string(in.String())
		case "square_cover":
			out.SquareCover = string(in.String())
		case "staff":
			out.Staff = string(in.String())
		case "stat":
			(out.Stat).UnmarshalEasyJSON(in)
		case "style":
			if in.IsNull() {
				in.Skip()
				out.Style = nil
			} else {
				in.Delim('[')
				if out.Style == nil {
					if !in.IsDelim(']') {
						out.Style = make([]string, 0, 4)
					} else {
						out.Style = []string{}
					}
				} else {
					out.Style = (out.Style)[:0]
				}
				for !in.IsDelim(']') {
					var v4 string
					v4 = string(in.String())
					out.Style = append(out.Style, v4)
					in.WantComma()
				}
				in.Delim(']')
			}
		case "title":
			out.Title = string(in.String())
		case "total_ep":
			out.TotalEp = int(in.Int())
		case "up_info":
			(out.UpInfo).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili5(out *jwriter.Writer, in Result) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"actors\":"
		out.RawString(prefix[1:])
		out.String(string(in.Actors))
	}
	{
		const prefix string = ",\"alias\":"
		out.RawString(prefix)
		out.String(string(in.Alias))
	}
	{
		const prefix string = ",\"areas\":"
		out.RawString(prefix)
		if in.Areas == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v5, v6 := range in.Areas {
				if v5 > 0 {
					out.RawByte(',')
				}
				(v6).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"episodes\":"
		out.RawString(prefix)
		if in.Episodes == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v7, v8 := range in.Episodes {
				if v7 > 0 {
					out.RawByte(',')
				}
				(v8).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"evaluate\":"
		out.RawString(prefix)
		out.String(string(in.Evaluate))
	}
	{
		const prefix string = ",\"is_paster_ads\":"
		out.RawString(prefix)
		out.Int(int(in.IsPasterAds))
	}
	{
		const prefix string = ",\"jp_title\":"
		out.RawString(prefix)
		out.String(string(in.JpTitle))
	}
	{
		const prefix string = ",\"link\":"
		out.RawString(prefix)
		out.String(string(in.Link))
	}
	{
		const prefix string = ",\"media_id\":"
		out.RawString(prefix)
		out.Int(int(in.MediaID))
	}
	{
		const prefix string = ",\"mode\":"
		out.RawString(prefix)
		out.Int(int(in.Mode))
	}
	{
		const prefix string = ",\"newest_ep\":"
		out.RawString(prefix)
		(in.NewestEp).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"paster_text\":"
		out.RawString(prefix)
		out.String(string(in.PasterText))
	}
	if in.Payment != nil {
		const prefix string = ",\"payment\":"
		out.RawString(prefix)
		(*in.Payment).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"publish\":"
		out.RawString(prefix)
		(in.Publish).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rating\":"
		out.RawString(prefix)
		(in.Rating).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"rights\":"
		out.RawString(prefix)
		(in.Rights).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"season_id\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonID))
	}
	{
		const prefix string = ",\"season_status\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonStatus))
	}
	{
		const prefix string = ",\"season_title\":"
		out.RawString(prefix)
		out.String(string(in.SeasonTitle))
	}
	{
		const prefix string = ",\"season_type\":"
		out.RawString(prefix)
		out.Int(int(in.SeasonType))
	}
	{
		const prefix string = ",\"seasons\":"
		out.RawString(prefix)
		if in.Seasons == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v9, v10 := range in.Seasons {
				if v9 > 0 {
					out.RawByte(',')
				}
				(v10).MarshalEasyJSON(out)
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"series_title\":"
		out.RawString(prefix)
		out.String(string(in.SeriesTitle))
	}
	{
		const prefix string = ",\"square_cover\":"
		out.RawString(prefix)
		out.String(string(in.SquareCover))
	}
	{
		const prefix string = ",\"staff\":"
		out.RawString(prefix)
		out.String(string(in.Staff))
	}
	{
		const prefix string = ",\"stat\":"
		out.RawString(prefix)
		(in.Stat).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"style\":"
		out.RawString(prefix)
		if in.Style == nil && (out.Flags&jwriter.NilSliceAsEmpty) == 0 {
			out.RawString("null")
		} else {
			out.RawByte('[')
			for v11, v12 := range in.Style {
				if v11 > 0 {
					out.RawByte(',')
				}
				out.String(string(v12))
			}
			out.RawByte(']')
		}
	}
	{
		const prefix string = ",\"title\":"
		out.RawString(prefix)
		out.String(string(in.Title))
	}
	{
		const prefix string = ",\"total_ep\":"
		out.RawString(prefix)
		out.Int(int(in.TotalEp))
	}
	{
		const prefix string = ",\"up_info\":"
		out.RawString(prefix)
		(in.UpInfo).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Result) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili5(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Result) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili5(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Result) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili5(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Result) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili5(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili6(in *jlexer.Lexer, out *Rating) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "count":
			out.Count = int(in.Int())
		case "score":
			out.Score = float64(in.Float64())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili6(out *jwriter.Writer, in Rating) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"count\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Count))
	}
	{
		const prefix string = ",\"score\":"
		out.RawString(prefix)
		out.Float64(float64(in.Score))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Rating) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili6(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Rating) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili6(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Rating) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili6(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Rating) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili6(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili7(in *jlexer.Lexer, out *Publish) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "is_finish":
			out.IsFinish = int(in.Int())
		case "is_started":
			out.IsStarted = int(in.Int())
		case "pub_time":
			out.PubTime = string(in.String())
		case "pub_time_show":
			out.PubTimeShow = string(in.String())
		case "weekday":
			out.Weekday = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili7(out *jwriter.Writer, in Publish) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"is_finish\":"
		out.RawString(prefix[1:])
		out.Int(int(in.IsFinish))
	}
	{
		const prefix string = ",\"is_started\":"
		out.RawString(prefix)
		out.Int(int(in.IsStarted))
	}
	{
		const prefix string = ",\"pub_time\":"
		out.RawString(prefix)
		out.String(string(in.PubTime))
	}
	{
		const prefix string = ",\"pub_time_show\":"
		out.RawString(prefix)
		out.String(string(in.PubTimeShow))
	}
	{
		const prefix string = ",\"weekday\":"
		out.RawString(prefix)
		out.Int(int(in.Weekday))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Publish) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili7(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Publish) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili7(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Publish) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili7(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Publish) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili7(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili8(in *jlexer.Lexer, out *Pendant) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "image":
			out.Image = string(in.String())
		case "name":
			out.Name = string(in.String())
		case "pid":
			out.Pid = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili8(out *jwriter.Writer, in Pendant) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"image\":"
		out.RawString(prefix[1:])
		out.String(string(in.Image))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	{
		const prefix string = ",\"pid\":"
		out.RawString(prefix)
		out.Int(int(in.Pid))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Pendant) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili8(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Pendant) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili8(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Pendant) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili8(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Pendant) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili8(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili9(in *jlexer.Lexer, out *Payment) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "discount":
			out.Discount = int(in.Int())
		case "pay_type":
			(out.PayType).UnmarshalEasyJSON(in)
		case "price":
			out.Price = string(in.String())
		case "promotion":
			out.Promotion = string(in.String())
		case "tip":
			out.Tip = string(in.String())
		case "vip_discount":
			out.VipDiscount = int(in.Int())
		case "vip_first_switch":
			out.VipFirstSwitch = string(in.String())
		case "vip_promotion":
			out.VipPromotion = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili9(out *jwriter.Writer, in Payment) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"discount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Discount))
	}
	{
		const prefix string = ",\"pay_type\":"
		out.RawString(prefix)
		(in.PayType).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"price\":"
		out.RawString(prefix)
		out.String(string(in.Price))
	}
	{
		const prefix string = ",\"promotion\":"
		out.RawString(prefix)
		out.String(string(in.Promotion))
	}
	{
		const prefix string = ",\"tip\":"
		out.RawString(prefix)
		out.String(string(in.Tip))
	}
	{
		const prefix string = ",\"vip_discount\":"
		out.RawString(prefix)
		out.Int(int(in.VipDiscount))
	}
	{
		const prefix string = ",\"vip_first_switch\":"
		out.RawString(prefix)
		out.String(string(in.VipFirstSwitch))
	}
	{
		const prefix string = ",\"vip_promotion\":"
		out.RawString(prefix)
		out.String(string(in.VipPromotion))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Payment) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili9(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Payment) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili9(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Payment) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili9(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Payment) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili9(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili10(in *jlexer.Lexer, out *PayType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "allow_discount":
			out.AllowDiscount = int(in.Int())
		case "allow_pack":
			out.AllowPack = int(in.Int())
		case "allow_ticket":
			out.AllowTicket = int(in.Int())
		case "allow_time_limit":
			out.AllowTimeLimit = int(in.Int())
		case "allow_vip_discount":
			out.AllowVipDiscount = int(in.Int())
		case "forbid_bb":
			out.ForbidBb = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili10(out *jwriter.Writer, in PayType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"allow_discount\":"
		out.RawString(prefix[1:])
		out.Int(int(in.AllowDiscount))
	}
	{
		const prefix string = ",\"allow_pack\":"
		out.RawString(prefix)
		out.Int(int(in.AllowPack))
	}
	{
		const prefix string = ",\"allow_ticket\":"
		out.RawString(prefix)
		out.Int(int(in.AllowTicket))
	}
	{
		const prefix string = ",\"allow_time_limit\":"
		out.RawString(prefix)
		out.Int(int(in.AllowTimeLimit))
	}
	{
		const prefix string = ",\"allow_vip_discount\":"
		out.RawString(prefix)
		out.Int(int(in.AllowVipDiscount))
	}
	{
		const prefix string = ",\"forbid_bb\":"
		out.RawString(prefix)
		out.Int(int(in.ForbidBb))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v PayType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili10(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v PayType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili10(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *PayType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili10(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *PayType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili10(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili11(in *jlexer.Lexer, out *NewestEp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "desc":
			out.Desc = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "index":
			out.Index = string(in.String())
		case "is_new":
			out.IsNew = int(in.Int())
		case "pub_real_time":
			out.PubRealTime = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili11(out *jwriter.Writer, in NewestEp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"desc\":"
		out.RawString(prefix[1:])
		out.String(string(in.Desc))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"is_new\":"
		out.RawString(prefix)
		out.Int(int(in.IsNew))
	}
	{
		const prefix string = ",\"pub_real_time\":"
		out.RawString(prefix)
		out.String(string(in.PubRealTime))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewestEp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili11(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewestEp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili11(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewestEp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili11(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewestEp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili11(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili12(in *jlexer.Lexer, out *NewEp) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "cover":
			out.Cover = string(in.String())
		case "id":
			out.ID = int(in.Int())
		case "index_show":
			out.IndexShow = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili12(out *jwriter.Writer, in NewEp) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix[1:])
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix)
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"index_show\":"
		out.RawString(prefix)
		out.String(string(in.IndexShow))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v NewEp) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili12(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v NewEp) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili12(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *NewEp) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili12(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *NewEp) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili12(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili13(in *jlexer.Lexer, out *Episodes) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "aid":
			out.Aid = int(in.Int())
		case "attr":
			out.Attr = int(in.Int())
		case "bvid":
			out.Bvid = string(in.String())
		case "cid":
			out.Cid = int(in.Int())
		case "cover":
			out.Cover = string(in.String())
		case "ctime":
			out.Ctime = string(in.String())
		case "duration":
			out.Duration = int(in.Int())
		case "ep_id":
			out.EpID = int(in.Int())
		case "episode_status":
			out.EpisodeStatus = int(in.Int())
		case "from":
			out.From = string(in.String())
		case "index":
			out.Index = string(in.String())
		case "index_title":
			out.IndexTitle = string(in.String())
		case "mid":
			out.Mid = int(in.Int())
		case "page":
			out.Page = int(in.Int())
		case "premiere":
			out.Premiere = bool(in.Bool())
		case "pub_real_time":
			out.PubRealTime = string(in.String())
		case "section_id":
			out.SectionID = int(in.Int())
		case "section_type":
			out.SectionType = int(in.Int())
		case "vid":
			out.Vid = string(in.String())
		case "episode_type":
			out.EpisodeType = int(in.Int())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili13(out *jwriter.Writer, in Episodes) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"aid\":"
		out.RawString(prefix[1:])
		out.Int(int(in.Aid))
	}
	{
		const prefix string = ",\"attr\":"
		out.RawString(prefix)
		out.Int(int(in.Attr))
	}
	{
		const prefix string = ",\"bvid\":"
		out.RawString(prefix)
		out.String(string(in.Bvid))
	}
	{
		const prefix string = ",\"cid\":"
		out.RawString(prefix)
		out.Int(int(in.Cid))
	}
	{
		const prefix string = ",\"cover\":"
		out.RawString(prefix)
		out.String(string(in.Cover))
	}
	{
		const prefix string = ",\"ctime\":"
		out.RawString(prefix)
		out.String(string(in.Ctime))
	}
	{
		const prefix string = ",\"duration\":"
		out.RawString(prefix)
		out.Int(int(in.Duration))
	}
	{
		const prefix string = ",\"ep_id\":"
		out.RawString(prefix)
		out.Int(int(in.EpID))
	}
	{
		const prefix string = ",\"episode_status\":"
		out.RawString(prefix)
		out.Int(int(in.EpisodeStatus))
	}
	{
		const prefix string = ",\"from\":"
		out.RawString(prefix)
		out.String(string(in.From))
	}
	{
		const prefix string = ",\"index\":"
		out.RawString(prefix)
		out.String(string(in.Index))
	}
	{
		const prefix string = ",\"index_title\":"
		out.RawString(prefix)
		out.String(string(in.IndexTitle))
	}
	{
		const prefix string = ",\"mid\":"
		out.RawString(prefix)
		out.Int(int(in.Mid))
	}
	{
		const prefix string = ",\"page\":"
		out.RawString(prefix)
		out.Int(int(in.Page))
	}
	{
		const prefix string = ",\"premiere\":"
		out.RawString(prefix)
		out.Bool(bool(in.Premiere))
	}
	{
		const prefix string = ",\"pub_real_time\":"
		out.RawString(prefix)
		out.String(string(in.PubRealTime))
	}
	{
		const prefix string = ",\"section_id\":"
		out.RawString(prefix)
		out.Int(int(in.SectionID))
	}
	{
		const prefix string = ",\"section_type\":"
		out.RawString(prefix)
		out.Int(int(in.SectionType))
	}
	{
		const prefix string = ",\"vid\":"
		out.RawString(prefix)
		out.String(string(in.Vid))
	}
	if in.EpisodeType != 0 {
		const prefix string = ",\"episode_type\":"
		out.RawString(prefix)
		out.Int(int(in.EpisodeType))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Episodes) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili13(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Episodes) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili13(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Episodes) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili13(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Episodes) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili13(l, v)
}
func easyjsonA209d07bDecodeBangumiEntityBilibili14(in *jlexer.Lexer, out *Areas) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "id":
			out.ID = int(in.Int())
		case "name":
			out.Name = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjsonA209d07bEncodeBangumiEntityBilibili14(out *jwriter.Writer, in Areas) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ID))
	}
	{
		const prefix string = ",\"name\":"
		out.RawString(prefix)
		out.String(string(in.Name))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Areas) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjsonA209d07bEncodeBangumiEntityBilibili14(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Areas) MarshalEasyJSON(w *jwriter.Writer) {
	easyjsonA209d07bEncodeBangumiEntityBilibili14(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Areas) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjsonA209d07bDecodeBangumiEntityBilibili14(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Areas) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjsonA209d07bDecodeBangumiEntityBilibili14(l, v)
}
