// Code generated by SQLBoiler 4.16.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// BilibiliSea is an object representing the database table.
type BilibiliSea struct {
	Cover      null.String `boil:"cover" json:"cover,omitempty" toml:"cover" yaml:"cover,omitempty"`
	IndexShow  null.String `boil:"index_show" json:"index_show,omitempty" toml:"index_show" yaml:"index_show,omitempty"`
	IsFinish   null.Bool   `boil:"is_finish" json:"is_finish,omitempty" toml:"is_finish" yaml:"is_finish,omitempty"`
	SeasonID   int64       `boil:"season_id" json:"season_id" toml:"season_id" yaml:"season_id"`
	SeasonType int64       `boil:"season_type" json:"season_type" toml:"season_type" yaml:"season_type"`
	Title      null.String `boil:"title" json:"title,omitempty" toml:"title" yaml:"title,omitempty"`
	UpdatedAt  time.Time   `boil:"updated_at" json:"updated_at" toml:"updated_at" yaml:"updated_at"`
	CreatedAt  time.Time   `boil:"created_at" json:"created_at" toml:"created_at" yaml:"created_at"`

	R *bilibiliSeaR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L bilibiliSeaL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var BilibiliSeaColumns = struct {
	Cover      string
	IndexShow  string
	IsFinish   string
	SeasonID   string
	SeasonType string
	Title      string
	UpdatedAt  string
	CreatedAt  string
}{
	Cover:      "cover",
	IndexShow:  "index_show",
	IsFinish:   "is_finish",
	SeasonID:   "season_id",
	SeasonType: "season_type",
	Title:      "title",
	UpdatedAt:  "updated_at",
	CreatedAt:  "created_at",
}

var BilibiliSeaTableColumns = struct {
	Cover      string
	IndexShow  string
	IsFinish   string
	SeasonID   string
	SeasonType string
	Title      string
	UpdatedAt  string
	CreatedAt  string
}{
	Cover:      "bilibili_sea.cover",
	IndexShow:  "bilibili_sea.index_show",
	IsFinish:   "bilibili_sea.is_finish",
	SeasonID:   "bilibili_sea.season_id",
	SeasonType: "bilibili_sea.season_type",
	Title:      "bilibili_sea.title",
	UpdatedAt:  "bilibili_sea.updated_at",
	CreatedAt:  "bilibili_sea.created_at",
}

// Generated where

var BilibiliSeaWhere = struct {
	Cover      whereHelpernull_String
	IndexShow  whereHelpernull_String
	IsFinish   whereHelpernull_Bool
	SeasonID   whereHelperint64
	SeasonType whereHelperint64
	Title      whereHelpernull_String
	UpdatedAt  whereHelpertime_Time
	CreatedAt  whereHelpertime_Time
}{
	Cover:      whereHelpernull_String{field: "\"bilibili_sea\".\"cover\""},
	IndexShow:  whereHelpernull_String{field: "\"bilibili_sea\".\"index_show\""},
	IsFinish:   whereHelpernull_Bool{field: "\"bilibili_sea\".\"is_finish\""},
	SeasonID:   whereHelperint64{field: "\"bilibili_sea\".\"season_id\""},
	SeasonType: whereHelperint64{field: "\"bilibili_sea\".\"season_type\""},
	Title:      whereHelpernull_String{field: "\"bilibili_sea\".\"title\""},
	UpdatedAt:  whereHelpertime_Time{field: "\"bilibili_sea\".\"updated_at\""},
	CreatedAt:  whereHelpertime_Time{field: "\"bilibili_sea\".\"created_at\""},
}

// BilibiliSeaRels is where relationship names are stored.
var BilibiliSeaRels = struct {
}{}

// bilibiliSeaR is where relationships are stored.
type bilibiliSeaR struct {
}

// NewStruct creates a new relationship struct
func (*bilibiliSeaR) NewStruct() *bilibiliSeaR {
	return &bilibiliSeaR{}
}

// bilibiliSeaL is where Load methods for each relationship are stored.
type bilibiliSeaL struct{}

var (
	bilibiliSeaAllColumns            = []string{"cover", "index_show", "is_finish", "season_id", "season_type", "title", "updated_at", "created_at"}
	bilibiliSeaColumnsWithoutDefault = []string{"season_type", "updated_at", "created_at"}
	bilibiliSeaColumnsWithDefault    = []string{"cover", "index_show", "is_finish", "season_id", "title"}
	bilibiliSeaPrimaryKeyColumns     = []string{"season_id"}
	bilibiliSeaGeneratedColumns      = []string{"season_id"}
)

type (
	// BilibiliSeaSlice is an alias for a slice of pointers to BilibiliSea.
	// This should almost always be used instead of []BilibiliSea.
	BilibiliSeaSlice []*BilibiliSea
	// BilibiliSeaHook is the signature for custom BilibiliSea hook methods
	BilibiliSeaHook func(context.Context, boil.ContextExecutor, *BilibiliSea) error

	bilibiliSeaQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	bilibiliSeaType                 = reflect.TypeOf(&BilibiliSea{})
	bilibiliSeaMapping              = queries.MakeStructMapping(bilibiliSeaType)
	bilibiliSeaPrimaryKeyMapping, _ = queries.BindMapping(bilibiliSeaType, bilibiliSeaMapping, bilibiliSeaPrimaryKeyColumns)
	bilibiliSeaInsertCacheMut       sync.RWMutex
	bilibiliSeaInsertCache          = make(map[string]insertCache)
	bilibiliSeaUpdateCacheMut       sync.RWMutex
	bilibiliSeaUpdateCache          = make(map[string]updateCache)
	bilibiliSeaUpsertCacheMut       sync.RWMutex
	bilibiliSeaUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var bilibiliSeaAfterSelectMu sync.Mutex
var bilibiliSeaAfterSelectHooks []BilibiliSeaHook

var bilibiliSeaBeforeInsertMu sync.Mutex
var bilibiliSeaBeforeInsertHooks []BilibiliSeaHook
var bilibiliSeaAfterInsertMu sync.Mutex
var bilibiliSeaAfterInsertHooks []BilibiliSeaHook

var bilibiliSeaBeforeUpdateMu sync.Mutex
var bilibiliSeaBeforeUpdateHooks []BilibiliSeaHook
var bilibiliSeaAfterUpdateMu sync.Mutex
var bilibiliSeaAfterUpdateHooks []BilibiliSeaHook

var bilibiliSeaBeforeDeleteMu sync.Mutex
var bilibiliSeaBeforeDeleteHooks []BilibiliSeaHook
var bilibiliSeaAfterDeleteMu sync.Mutex
var bilibiliSeaAfterDeleteHooks []BilibiliSeaHook

var bilibiliSeaBeforeUpsertMu sync.Mutex
var bilibiliSeaBeforeUpsertHooks []BilibiliSeaHook
var bilibiliSeaAfterUpsertMu sync.Mutex
var bilibiliSeaAfterUpsertHooks []BilibiliSeaHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *BilibiliSea) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *BilibiliSea) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *BilibiliSea) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *BilibiliSea) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *BilibiliSea) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *BilibiliSea) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *BilibiliSea) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *BilibiliSea) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *BilibiliSea) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range bilibiliSeaAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddBilibiliSeaHook registers your hook function for all future operations.
func AddBilibiliSeaHook(hookPoint boil.HookPoint, bilibiliSeaHook BilibiliSeaHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		bilibiliSeaAfterSelectMu.Lock()
		bilibiliSeaAfterSelectHooks = append(bilibiliSeaAfterSelectHooks, bilibiliSeaHook)
		bilibiliSeaAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		bilibiliSeaBeforeInsertMu.Lock()
		bilibiliSeaBeforeInsertHooks = append(bilibiliSeaBeforeInsertHooks, bilibiliSeaHook)
		bilibiliSeaBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		bilibiliSeaAfterInsertMu.Lock()
		bilibiliSeaAfterInsertHooks = append(bilibiliSeaAfterInsertHooks, bilibiliSeaHook)
		bilibiliSeaAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		bilibiliSeaBeforeUpdateMu.Lock()
		bilibiliSeaBeforeUpdateHooks = append(bilibiliSeaBeforeUpdateHooks, bilibiliSeaHook)
		bilibiliSeaBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		bilibiliSeaAfterUpdateMu.Lock()
		bilibiliSeaAfterUpdateHooks = append(bilibiliSeaAfterUpdateHooks, bilibiliSeaHook)
		bilibiliSeaAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		bilibiliSeaBeforeDeleteMu.Lock()
		bilibiliSeaBeforeDeleteHooks = append(bilibiliSeaBeforeDeleteHooks, bilibiliSeaHook)
		bilibiliSeaBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		bilibiliSeaAfterDeleteMu.Lock()
		bilibiliSeaAfterDeleteHooks = append(bilibiliSeaAfterDeleteHooks, bilibiliSeaHook)
		bilibiliSeaAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		bilibiliSeaBeforeUpsertMu.Lock()
		bilibiliSeaBeforeUpsertHooks = append(bilibiliSeaBeforeUpsertHooks, bilibiliSeaHook)
		bilibiliSeaBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		bilibiliSeaAfterUpsertMu.Lock()
		bilibiliSeaAfterUpsertHooks = append(bilibiliSeaAfterUpsertHooks, bilibiliSeaHook)
		bilibiliSeaAfterUpsertMu.Unlock()
	}
}

// One returns a single bilibiliSea record from the query.
func (q bilibiliSeaQuery) One(ctx context.Context, exec boil.ContextExecutor) (*BilibiliSea, error) {
	o := &BilibiliSea{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for bilibili_sea")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all BilibiliSea records from the query.
func (q bilibiliSeaQuery) All(ctx context.Context, exec boil.ContextExecutor) (BilibiliSeaSlice, error) {
	var o []*BilibiliSea

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to BilibiliSea slice")
	}

	if len(bilibiliSeaAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all BilibiliSea records in the query.
func (q bilibiliSeaQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count bilibili_sea rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q bilibiliSeaQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if bilibili_sea exists")
	}

	return count > 0, nil
}

// BilibiliSeas retrieves all the records using an executor.
func BilibiliSeas(mods ...qm.QueryMod) bilibiliSeaQuery {
	mods = append(mods, qm.From("\"bilibili_sea\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"bilibili_sea\".*"})
	}

	return bilibiliSeaQuery{q}
}

// FindBilibiliSea retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindBilibiliSea(ctx context.Context, exec boil.ContextExecutor, seasonID int64, selectCols ...string) (*BilibiliSea, error) {
	bilibiliSeaObj := &BilibiliSea{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"bilibili_sea\" where \"season_id\"=?", sel,
	)

	q := queries.Raw(query, seasonID)

	err := q.Bind(ctx, exec, bilibiliSeaObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from bilibili_sea")
	}

	if err = bilibiliSeaObj.doAfterSelectHooks(ctx, exec); err != nil {
		return bilibiliSeaObj, err
	}

	return bilibiliSeaObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *BilibiliSea) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bilibili_sea provided for insertion")
	}

	var err error
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		if o.UpdatedAt.IsZero() {
			o.UpdatedAt = currTime
		}
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bilibiliSeaColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	bilibiliSeaInsertCacheMut.RLock()
	cache, cached := bilibiliSeaInsertCache[key]
	bilibiliSeaInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			bilibiliSeaAllColumns,
			bilibiliSeaColumnsWithDefault,
			bilibiliSeaColumnsWithoutDefault,
			nzDefaults,
		)
		wl = strmangle.SetComplement(wl, bilibiliSeaGeneratedColumns)

		cache.valueMapping, err = queries.BindMapping(bilibiliSeaType, bilibiliSeaMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(bilibiliSeaType, bilibiliSeaMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"bilibili_sea\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"bilibili_sea\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into bilibili_sea")
	}

	if !cached {
		bilibiliSeaInsertCacheMut.Lock()
		bilibiliSeaInsertCache[key] = cache
		bilibiliSeaInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the BilibiliSea.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *BilibiliSea) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
	}

	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	bilibiliSeaUpdateCacheMut.RLock()
	cache, cached := bilibiliSeaUpdateCache[key]
	bilibiliSeaUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			bilibiliSeaAllColumns,
			bilibiliSeaPrimaryKeyColumns,
		)
		wl = strmangle.SetComplement(wl, bilibiliSeaGeneratedColumns)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update bilibili_sea, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"bilibili_sea\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 0, wl),
			strmangle.WhereClause("\"", "\"", 0, bilibiliSeaPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(bilibiliSeaType, bilibiliSeaMapping, append(wl, bilibiliSeaPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update bilibili_sea row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for bilibili_sea")
	}

	if !cached {
		bilibiliSeaUpdateCacheMut.Lock()
		bilibiliSeaUpdateCache[key] = cache
		bilibiliSeaUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q bilibiliSeaQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for bilibili_sea")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for bilibili_sea")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o BilibiliSeaSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bilibiliSeaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"bilibili_sea\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 0, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bilibiliSeaPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in bilibiliSea slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all bilibiliSea")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *BilibiliSea) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no bilibili_sea provided for upsert")
	}
	if !boil.TimestampsAreSkipped(ctx) {
		currTime := time.Now().In(boil.GetLocation())

		o.UpdatedAt = currTime
		if o.CreatedAt.IsZero() {
			o.CreatedAt = currTime
		}
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(bilibiliSeaColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	bilibiliSeaUpsertCacheMut.RLock()
	cache, cached := bilibiliSeaUpsertCache[key]
	bilibiliSeaUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			bilibiliSeaAllColumns,
			bilibiliSeaColumnsWithDefault,
			bilibiliSeaColumnsWithoutDefault,
			nzDefaults,
		)
		update := updateColumns.UpdateColumnSet(
			bilibiliSeaAllColumns,
			bilibiliSeaPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert bilibili_sea, could not build update column list")
		}

		ret := strmangle.SetComplement(bilibiliSeaAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(bilibiliSeaPrimaryKeyColumns))
			copy(conflict, bilibiliSeaPrimaryKeyColumns)
		}
		cache.query = buildUpsertQuerySQLite(dialect, "\"bilibili_sea\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(bilibiliSeaType, bilibiliSeaMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(bilibiliSeaType, bilibiliSeaMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert bilibili_sea")
	}

	if !cached {
		bilibiliSeaUpsertCacheMut.Lock()
		bilibiliSeaUpsertCache[key] = cache
		bilibiliSeaUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single BilibiliSea record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *BilibiliSea) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no BilibiliSea provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), bilibiliSeaPrimaryKeyMapping)
	sql := "DELETE FROM \"bilibili_sea\" WHERE \"season_id\"=?"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from bilibili_sea")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for bilibili_sea")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q bilibiliSeaQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no bilibiliSeaQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bilibili_sea")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bilibili_sea")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o BilibiliSeaSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(bilibiliSeaBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bilibiliSeaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"bilibili_sea\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bilibiliSeaPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from bilibiliSea slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for bilibili_sea")
	}

	if len(bilibiliSeaAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *BilibiliSea) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindBilibiliSea(ctx, exec, o.SeasonID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *BilibiliSeaSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := BilibiliSeaSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), bilibiliSeaPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"bilibili_sea\".* FROM \"bilibili_sea\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 0, bilibiliSeaPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in BilibiliSeaSlice")
	}

	*o = slice

	return nil
}

// BilibiliSeaExists checks if the BilibiliSea row exists.
func BilibiliSeaExists(ctx context.Context, exec boil.ContextExecutor, seasonID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"bilibili_sea\" where \"season_id\"=? limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, seasonID)
	}
	row := exec.QueryRowContext(ctx, sql, seasonID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if bilibili_sea exists")
	}

	return exists, nil
}

// Exists checks if the BilibiliSea row exists.
func (o *BilibiliSea) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return BilibiliSeaExists(ctx, exec, o.SeasonID)
}
