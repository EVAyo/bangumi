// Code generated by SQLBoiler 4.14.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testBilibilis(t *testing.T) {
	t.Parallel()

	query := Bilibilis()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testBilibilisDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBilibilisQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Bilibilis().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBilibilisSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BilibiliSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testBilibilisExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := BilibiliExists(ctx, tx, o.SeasonID)
	if err != nil {
		t.Errorf("Unable to check if Bilibili exists: %s", err)
	}
	if !e {
		t.Errorf("Expected BilibiliExists to return true, but got false.")
	}
}

func testBilibilisFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	bilibiliFound, err := FindBilibili(ctx, tx, o.SeasonID)
	if err != nil {
		t.Error(err)
	}

	if bilibiliFound == nil {
		t.Error("want a record, got nil")
	}
}

func testBilibilisBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Bilibilis().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testBilibilisOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Bilibilis().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testBilibilisAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	bilibiliOne := &Bilibili{}
	bilibiliTwo := &Bilibili{}
	if err = randomize.Struct(seed, bilibiliOne, bilibiliDBTypes, false, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}
	if err = randomize.Struct(seed, bilibiliTwo, bilibiliDBTypes, false, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bilibiliOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bilibiliTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bilibilis().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testBilibilisCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	bilibiliOne := &Bilibili{}
	bilibiliTwo := &Bilibili{}
	if err = randomize.Struct(seed, bilibiliOne, bilibiliDBTypes, false, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}
	if err = randomize.Struct(seed, bilibiliTwo, bilibiliDBTypes, false, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = bilibiliOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = bilibiliTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func bilibiliBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func bilibiliAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func bilibiliAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func bilibiliBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func bilibiliAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func bilibiliBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func bilibiliAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func bilibiliBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func bilibiliAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Bilibili) error {
	*o = Bilibili{}
	return nil
}

func testBilibilisHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Bilibili{}
	o := &Bilibili{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, bilibiliDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Bilibili object: %s", err)
	}

	AddBilibiliHook(boil.BeforeInsertHook, bilibiliBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	bilibiliBeforeInsertHooks = []BilibiliHook{}

	AddBilibiliHook(boil.AfterInsertHook, bilibiliAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	bilibiliAfterInsertHooks = []BilibiliHook{}

	AddBilibiliHook(boil.AfterSelectHook, bilibiliAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	bilibiliAfterSelectHooks = []BilibiliHook{}

	AddBilibiliHook(boil.BeforeUpdateHook, bilibiliBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	bilibiliBeforeUpdateHooks = []BilibiliHook{}

	AddBilibiliHook(boil.AfterUpdateHook, bilibiliAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	bilibiliAfterUpdateHooks = []BilibiliHook{}

	AddBilibiliHook(boil.BeforeDeleteHook, bilibiliBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	bilibiliBeforeDeleteHooks = []BilibiliHook{}

	AddBilibiliHook(boil.AfterDeleteHook, bilibiliAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	bilibiliAfterDeleteHooks = []BilibiliHook{}

	AddBilibiliHook(boil.BeforeUpsertHook, bilibiliBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	bilibiliBeforeUpsertHooks = []BilibiliHook{}

	AddBilibiliHook(boil.AfterUpsertHook, bilibiliAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	bilibiliAfterUpsertHooks = []BilibiliHook{}
}

func testBilibilisInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBilibilisInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(bilibiliColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testBilibilisReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBilibilisReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := BilibiliSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testBilibilisSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Bilibilis().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	bilibiliDBTypes = map[string]string{`Actors`: `VARCHAR(512)`, `Areas`: `VARCHAR(16)`, `Alias`: `VARCHAR(256)`, `Cover`: `VARCHAR(128)`, `Evaluate`: `VARCHAR(512)`, `JPTitle`: `VARCHAR(128)`, `MediaID`: `INTEGER`, `IsVip`: `BOOLEAN`, `PubTime`: `DATETIME`, `RatingCount`: `INTEGER`, `RatingScore`: `REAL`, `Copyright`: `VARCHAR(16)`, `SeasonID`: `INTEGER`, `SeasonTitle`: `VARCHAR(128)`, `SeasonType`: `INTEGER`, `SeriesTitle`: `VARCHAR(128)`, `SquareCover`: `VARCHAR(128)`, `Coins`: `INTEGER`, `Danmakus`: `INTEGER`, `Views`: `INTEGER`, `Style`: `VARCHAR(64)`, `Title`: `VARCHAR(128)`, `UpMid`: `INTEGER`, `UpdatedAt`: `DATETIME`, `CreatedAt`: `DATETIME`}
	_               = bytes.MinRead
)

func testBilibilisUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(bilibiliPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(bilibiliAllColumns) == len(bilibiliPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testBilibilisSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(bilibiliAllColumns) == len(bilibiliPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Bilibili{}
	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, bilibiliDBTypes, true, bilibiliPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(bilibiliAllColumns, bilibiliPrimaryKeyColumns) {
		fields = bilibiliAllColumns
	} else {
		fields = strmangle.SetComplement(
			bilibiliAllColumns,
			bilibiliPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, bilibiliGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := BilibiliSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testBilibilisUpsert(t *testing.T) {
	t.Parallel()
	if len(bilibiliAllColumns) == len(bilibiliPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Bilibili{}
	if err = randomize.Struct(seed, &o, bilibiliDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bilibili: %s", err)
	}

	count, err := Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, bilibiliDBTypes, false, bilibiliPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Bilibili struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Bilibili: %s", err)
	}

	count, err = Bilibilis().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
