// Code generated by SQLBoiler 4.11.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/randomize"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testAnigamers(t *testing.T) {
	t.Parallel()

	query := Anigamers()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testAnigamersDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnigamersQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Anigamers().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnigamersSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnigamerSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testAnigamersExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := AnigamerExists(ctx, tx, o.AnimeSN)
	if err != nil {
		t.Errorf("Unable to check if Anigamer exists: %s", err)
	}
	if !e {
		t.Errorf("Expected AnigamerExists to return true, but got false.")
	}
}

func testAnigamersFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	anigamerFound, err := FindAnigamer(ctx, tx, o.AnimeSN)
	if err != nil {
		t.Error(err)
	}

	if anigamerFound == nil {
		t.Error("want a record, got nil")
	}
}

func testAnigamersBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Anigamers().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testAnigamersOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Anigamers().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testAnigamersAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	anigamerOne := &Anigamer{}
	anigamerTwo := &Anigamer{}
	if err = randomize.Struct(seed, anigamerOne, anigamerDBTypes, false, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}
	if err = randomize.Struct(seed, anigamerTwo, anigamerDBTypes, false, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = anigamerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = anigamerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Anigamers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testAnigamersCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	anigamerOne := &Anigamer{}
	anigamerTwo := &Anigamer{}
	if err = randomize.Struct(seed, anigamerOne, anigamerDBTypes, false, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}
	if err = randomize.Struct(seed, anigamerTwo, anigamerDBTypes, false, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = anigamerOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = anigamerTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func anigamerBeforeInsertHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func anigamerAfterInsertHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func anigamerAfterSelectHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func anigamerBeforeUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func anigamerAfterUpdateHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func anigamerBeforeDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func anigamerAfterDeleteHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func anigamerBeforeUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func anigamerAfterUpsertHook(ctx context.Context, e boil.ContextExecutor, o *Anigamer) error {
	*o = Anigamer{}
	return nil
}

func testAnigamersHooks(t *testing.T) {
	t.Parallel()

	var err error

	ctx := context.Background()
	empty := &Anigamer{}
	o := &Anigamer{}

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, o, anigamerDBTypes, false); err != nil {
		t.Errorf("Unable to randomize Anigamer object: %s", err)
	}

	AddAnigamerHook(boil.BeforeInsertHook, anigamerBeforeInsertHook)
	if err = o.doBeforeInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeInsertHook function to empty object, but got: %#v", o)
	}
	anigamerBeforeInsertHooks = []AnigamerHook{}

	AddAnigamerHook(boil.AfterInsertHook, anigamerAfterInsertHook)
	if err = o.doAfterInsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterInsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterInsertHook function to empty object, but got: %#v", o)
	}
	anigamerAfterInsertHooks = []AnigamerHook{}

	AddAnigamerHook(boil.AfterSelectHook, anigamerAfterSelectHook)
	if err = o.doAfterSelectHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterSelectHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterSelectHook function to empty object, but got: %#v", o)
	}
	anigamerAfterSelectHooks = []AnigamerHook{}

	AddAnigamerHook(boil.BeforeUpdateHook, anigamerBeforeUpdateHook)
	if err = o.doBeforeUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpdateHook function to empty object, but got: %#v", o)
	}
	anigamerBeforeUpdateHooks = []AnigamerHook{}

	AddAnigamerHook(boil.AfterUpdateHook, anigamerAfterUpdateHook)
	if err = o.doAfterUpdateHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpdateHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpdateHook function to empty object, but got: %#v", o)
	}
	anigamerAfterUpdateHooks = []AnigamerHook{}

	AddAnigamerHook(boil.BeforeDeleteHook, anigamerBeforeDeleteHook)
	if err = o.doBeforeDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeDeleteHook function to empty object, but got: %#v", o)
	}
	anigamerBeforeDeleteHooks = []AnigamerHook{}

	AddAnigamerHook(boil.AfterDeleteHook, anigamerAfterDeleteHook)
	if err = o.doAfterDeleteHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterDeleteHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterDeleteHook function to empty object, but got: %#v", o)
	}
	anigamerAfterDeleteHooks = []AnigamerHook{}

	AddAnigamerHook(boil.BeforeUpsertHook, anigamerBeforeUpsertHook)
	if err = o.doBeforeUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doBeforeUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected BeforeUpsertHook function to empty object, but got: %#v", o)
	}
	anigamerBeforeUpsertHooks = []AnigamerHook{}

	AddAnigamerHook(boil.AfterUpsertHook, anigamerAfterUpsertHook)
	if err = o.doAfterUpsertHooks(ctx, nil); err != nil {
		t.Errorf("Unable to execute doAfterUpsertHooks: %s", err)
	}
	if !reflect.DeepEqual(o, empty) {
		t.Errorf("Expected AfterUpsertHook function to empty object, but got: %#v", o)
	}
	anigamerAfterUpsertHooks = []AnigamerHook{}
}

func testAnigamersInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnigamersInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(anigamerColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testAnigamersReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnigamersReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := AnigamerSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testAnigamersSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Anigamers().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	anigamerDBTypes = map[string]string{`AcgSN`: `INTEGER`, `AnimeSN`: `INTEGER`, `Title`: `VARCHAR(128)`, `DCC1`: `INTEGER`, `DCC2`: `INTEGER`, `Cover`: `VARCHAR(128)`, `Popular`: `INTEGER`, `Bilingual`: `BOOLEAN`, `Edition`: `VARCHAR(16)`, `VipTime`: `DATETIME`, `Score`: `REAL`, `UpdatedAt`: `DATETIME`, `CreatedAt`: `DATETIME`}
	_               = bytes.MinRead
)

func testAnigamersUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(anigamerPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(anigamerAllColumns) == len(anigamerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testAnigamersSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(anigamerAllColumns) == len(anigamerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Anigamer{}
	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, anigamerDBTypes, true, anigamerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(anigamerAllColumns, anigamerPrimaryKeyColumns) {
		fields = anigamerAllColumns
	} else {
		fields = strmangle.SetComplement(
			anigamerAllColumns,
			anigamerPrimaryKeyColumns,
		)
		fields = strmangle.SetComplement(fields, anigamerGeneratedColumns)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := AnigamerSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testAnigamersUpsert(t *testing.T) {
	t.Parallel()
	if len(anigamerAllColumns) == len(anigamerPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Anigamer{}
	if err = randomize.Struct(seed, &o, anigamerDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Anigamer: %s", err)
	}

	count, err := Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, anigamerDBTypes, false, anigamerPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Anigamer struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Anigamer: %s", err)
	}

	count, err = Anigamers().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
