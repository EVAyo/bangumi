// Code generated by SQLBoiler 4.8.6 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Anigamers", testAnigamers)
	t.Run("Bilibilis", testBilibilis)
	t.Run("BilibiliSeas", testBilibiliSeas)
}

func TestDelete(t *testing.T) {
	t.Run("Anigamers", testAnigamersDelete)
	t.Run("Bilibilis", testBilibilisDelete)
	t.Run("BilibiliSeas", testBilibiliSeasDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Anigamers", testAnigamersQueryDeleteAll)
	t.Run("Bilibilis", testBilibilisQueryDeleteAll)
	t.Run("BilibiliSeas", testBilibiliSeasQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Anigamers", testAnigamersSliceDeleteAll)
	t.Run("Bilibilis", testBilibilisSliceDeleteAll)
	t.Run("BilibiliSeas", testBilibiliSeasSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Anigamers", testAnigamersExists)
	t.Run("Bilibilis", testBilibilisExists)
	t.Run("BilibiliSeas", testBilibiliSeasExists)
}

func TestFind(t *testing.T) {
	t.Run("Anigamers", testAnigamersFind)
	t.Run("Bilibilis", testBilibilisFind)
	t.Run("BilibiliSeas", testBilibiliSeasFind)
}

func TestBind(t *testing.T) {
	t.Run("Anigamers", testAnigamersBind)
	t.Run("Bilibilis", testBilibilisBind)
	t.Run("BilibiliSeas", testBilibiliSeasBind)
}

func TestOne(t *testing.T) {
	t.Run("Anigamers", testAnigamersOne)
	t.Run("Bilibilis", testBilibilisOne)
	t.Run("BilibiliSeas", testBilibiliSeasOne)
}

func TestAll(t *testing.T) {
	t.Run("Anigamers", testAnigamersAll)
	t.Run("Bilibilis", testBilibilisAll)
	t.Run("BilibiliSeas", testBilibiliSeasAll)
}

func TestCount(t *testing.T) {
	t.Run("Anigamers", testAnigamersCount)
	t.Run("Bilibilis", testBilibilisCount)
	t.Run("BilibiliSeas", testBilibiliSeasCount)
}

func TestHooks(t *testing.T) {
	t.Run("Anigamers", testAnigamersHooks)
	t.Run("Bilibilis", testBilibilisHooks)
	t.Run("BilibiliSeas", testBilibiliSeasHooks)
}

func TestInsert(t *testing.T) {
	t.Run("Anigamers", testAnigamersInsert)
	t.Run("Anigamers", testAnigamersInsertWhitelist)
	t.Run("Bilibilis", testBilibilisInsert)
	t.Run("Bilibilis", testBilibilisInsertWhitelist)
	t.Run("BilibiliSeas", testBilibiliSeasInsert)
	t.Run("BilibiliSeas", testBilibiliSeasInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Anigamers", testAnigamersReload)
	t.Run("Bilibilis", testBilibilisReload)
	t.Run("BilibiliSeas", testBilibiliSeasReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Anigamers", testAnigamersReloadAll)
	t.Run("Bilibilis", testBilibilisReloadAll)
	t.Run("BilibiliSeas", testBilibiliSeasReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Anigamers", testAnigamersSelect)
	t.Run("Bilibilis", testBilibilisSelect)
	t.Run("BilibiliSeas", testBilibiliSeasSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Anigamers", testAnigamersUpdate)
	t.Run("Bilibilis", testBilibilisUpdate)
	t.Run("BilibiliSeas", testBilibiliSeasUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Anigamers", testAnigamersSliceUpdateAll)
	t.Run("Bilibilis", testBilibilisSliceUpdateAll)
	t.Run("BilibiliSeas", testBilibiliSeasSliceUpdateAll)
}
